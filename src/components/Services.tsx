import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { 
  Monitor, 
  Palette, 
  Code, 
  Megaphone, 
  Smartphone, 
  Zap,
  ChevronRight,
  Terminal,
  Send,
  User,
  Phone,
  MessageCircle
} from "lucide-react";
import { useState } from "react";
import { useToast } from "@/hooks/use-toast";

const services = [
  {
    id: "01",
    title: "–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
    description: "–°–∞–π—Ç—ã –∏ –≤–µ–±‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —É–ø–æ—Ä–æ–º –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –∏ SEO",
    icon: Code,
    command: "$ build_web --framework=react --responsive=true",
  },
  {
    id: "02", 
    title: "UI/UX –î–∏–∑–∞–π–Ω",
    description: "–ü—Ä–æ—Ç–æ—Ç–∏–ø—ã, –¥–∏–∑–∞–π–Ω‚Äë—Å–∏—Å—Ç–µ–º—ã –∏ —É–¥–æ–±–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã",
    icon: Palette,
    command: "$ design_ui --system=design-tokens --a11y=true",
  },
  {
    id: "03",
    title: "–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", 
    description: "iOS –∏ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö",
    icon: Smartphone,
    command: "$ develop_mobile --platform=cross --ui=modern",
  },
  {
    id: "04",
    title: "–ë—Ä–µ–Ω–¥–∏–Ω–≥",
    description: "–ê–π–¥–µ–Ω—Ç–∏–∫–∞, –ª–æ–≥–æ—Ç–∏–ø—ã –∏ –±—Ä–µ–Ω–¥‚Äë–≥–∞–π–¥ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞",
    icon: Megaphone,
    command: "$ brand_init --logo=quirkynest --guide=true",
  },
  {
    id: "05",
    title: "Digital –º–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    description: "–†–µ–∫–ª–∞–º–∞, –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è —Ä–æ—Å—Ç–∞",
    icon: Megaphone,
    command: "$ marketing_launch --channels=multi --tracking=true",
  },
];

const Services = () => {
  const [activeForm, setActiveForm] = useState<string | null>(null);
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    service: '',
    message: ''
  });
  const { toast } = useToast();

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleTelegramSubmit = async (serviceTitle: string) => {
    if (!formData.name || !formData.phone) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω",
        variant: "destructive",
      });
      return;
    }

    const telegramMessage = `üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É: ${serviceTitle}

üë§ –ò–º—è: ${formData.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
${formData.message ? `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.message}` : ''}

üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–≤—è–∑–∏ –≤ Telegram, –Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–µ–µ —Å–≤—è–∑–∞—Ç—å—Å—è –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ Telegram`;

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram Bot API
      const botToken = '8314217513:AAHhxLHdM7biYi0FEG6hzvSPivYP6CnPkQE';
      const chatId = '7702221669';
      
      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: telegramMessage,
          parse_mode: 'HTML'
        })
      });

      if (response.ok) {
        toast({
          title: "–û—Ç–ª–∏—á–Ω–æ!",
          description: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram",
        });
        
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
        setFormData({ name: '', phone: '', service: '', message: '' });
        setActiveForm(null);
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
      
      // Fallback - –æ—Ç–∫—Ä—ã–≤–∞–µ–º Telegram —Å –≥–æ—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      const telegramUrl = `https://t.me/7702221669?text=${encodeURIComponent(telegramMessage)}`;
      window.open(telegramUrl, '_blank');
      
      toast({
        title: "–û—Ç–∫—Ä—ã—Ç Telegram",
        description: "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é",
        variant: "destructive",
      });
    }
  };

  const openTelegramDirect = () => {
    window.open('https://t.me/Irisarts1', '_blank');
  };

  return (
    <section id="services" className="py-20 px-6 relative overflow-hidden">
      {/* Background Effects */}
      <div className="absolute inset-0 bg-gradient-to-b from-background via-background/50 to-background"></div>
      <div className="absolute top-0 left-0 w-full h-px bg-gradient-to-r from-transparent via-primary to-transparent animate-pulse"></div>
      
      <div className="container mx-auto relative z-10">
        {/* Section Header */}
        <div className="text-center mb-16">
          <div className="inline-flex items-center space-x-2 mb-6 text-primary font-orbitron text-sm tracking-widest uppercase">
            <Terminal className="h-4 w-4 animate-pulse-glow" />
            <span>–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏</span>
            <Terminal className="h-4 w-4 animate-pulse-glow" />
          </div>
          
          <h2 className="text-4xl md:text-6xl font-orbitron font-black text-foreground mb-6">
            <span className="text-neon bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
              –ù–ê–®–ò –£–°–õ–£–ì–ò
            </span>
          </h2>
          
          <p className="text-xl text-foreground/80 font-rajdhani max-w-3xl mx-auto">
            –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –≤–µ–±-–¥–∏–∑–∞–π–Ω–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –ö–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ü–∏—Ñ—Ä–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
          </p>
        </div>

        {/* Services Grid */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8">
          {services.map((service, index) => (
            <div
              key={service.id}
              className="group terminal p-8 rounded-lg hover:shadow-neon transition-all duration-500 relative overflow-hidden"
              style={{ animationDelay: `${index * 0.2}s` }}
            >
              {/* Terminal Header */}
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center space-x-3">
                  <div className="w-3 h-3 bg-destructive rounded-full"></div>
                  <div className="w-3 h-3 bg-accent rounded-full"></div>
                  <div className="w-3 h-3 bg-muted rounded-full"></div>
                </div>
                <span className="text-xs font-orbitron text-muted-foreground tracking-wider">
                  MODULE_{service.id}
                </span>
              </div>

              {/* Service Icon */}
              <div className="relative mb-6">
                <service.icon className="h-16 w-16 text-primary mx-auto group-hover:text-accent transition-colors duration-300" />
                <div className="absolute inset-0 bg-primary/20 rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              </div>

              {/* Terminal Command */}
              <div className="bg-background/20 rounded p-3 mb-4 border border-muted/20">
                <code className="text-xs font-orbitron text-muted group-hover:text-primary transition-colors">
                  {service.command}
                </code>
              </div>

              {/* Service Details */}
              <div className="space-y-4">
                <h3 className="text-xl font-orbitron font-bold text-foreground group-hover:text-primary transition-colors">
                  {service.title}
                </h3>
                
                <p className="text-foreground/70 font-rajdhani leading-relaxed">
                  {service.description}
                </p>
              </div>

              {/* Action */}
              <div className="mt-8">
                {activeForm === service.id ? (
                  <div className="space-y-4">
                    <div className="space-y-3">
                      <div className="space-y-2">
                        <label className="text-foreground font-orbitron text-xs tracking-wider flex items-center">
                          <User className="h-3 w-3 mr-2 text-primary" />
                          –ò–ú–Ø *
                        </label>
                        <Input 
                          name="name"
                          value={formData.name}
                          onChange={handleInputChange}
                          placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                          className="bg-background/20 border-border/50 text-foreground font-rajdhani focus:border-primary transition-colors text-xs"
                          required
                        />
                      </div>

                      <div className="space-y-2">
                        <label className="text-foreground font-orbitron text-xs tracking-wider flex items-center">
                          <Phone className="h-3 w-3 mr-2 text-primary" />
                          –¢–ï–õ–ï–§–û–ù *
                        </label>
                        <Input 
                          name="phone"
                          value={formData.phone}
                          onChange={handleInputChange}
                          placeholder="+7 (999) 123-45-67"
                          className="bg-background/20 border-border/50 text-foreground font-rajdhani focus:border-primary transition-colors text-xs"
                          required
                        />
                      </div>

                      <div className="space-y-2">
                        <label className="text-foreground font-orbitron text-xs tracking-wider flex items-center">
                          <MessageCircle className="h-3 w-3 mr-2 text-primary" />
                          –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û
                        </label>
                        <Textarea 
                          name="message"
                          value={formData.message}
                          onChange={handleInputChange}
                          placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ..."
                          rows={2}
                          className="bg-background/20 border-border/50 text-foreground font-rajdhani focus:border-primary transition-colors resize-none text-xs"
                        />
                      </div>
                    </div>

                    <div className="flex space-x-2">
                      <Button 
                        onClick={() => handleTelegramSubmit(service.title)}
                        variant="terminal" 
                        className="flex-1 text-xs"
                      >
                        <Send className="mr-2 h-3 w-3" />
                        –û–¢–ü–†–ê–í–ò–¢–¨
                      </Button>
                      <Button 
                        onClick={() => setActiveForm(null)}
                        variant="outline" 
                        className="text-xs"
                      >
                        –û–¢–ú–ï–ù–ê
                      </Button>
                    </div>

                    <div className="text-center space-y-2">
                      <p className="text-xs text-muted-foreground">
                        –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–≤—è–∑–∏ –≤ Telegram, –Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–µ–µ —Å–≤—è–∑–∞—Ç—å—Å—è:
                      </p>
                      <Button 
                        onClick={openTelegramDirect}
                        variant="outline" 
                        size="sm"
                        className="text-xs border-primary/50 text-primary hover:bg-primary/10"
                      >
                        <MessageCircle className="mr-2 h-3 w-3" />
                        –ù–ê–ü–ò–°–ê–¢–¨ –í TELEGRAM
                      </Button>
                    </div>
                  </div>
                ) : (
                  <Button 
                    onClick={() => setActiveForm(service.id)}
                    variant="terminal" 
                    className="w-full group-hover:border-primary group-hover:text-primary"
                  >
                    –ó–ê–ö–ê–ó–ê–¢–¨ –£–°–õ–£–ì–£
                    <ChevronRight className="ml-2 h-4 w-4" />
                  </Button>
                )}
              </div>

              {/* Glitch Effect on Hover */}
              <div className="absolute inset-0 bg-gradient-to-r from-primary/5 to-accent/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
            </div>
          ))}
        </div>

        {/* Bottom CTA */}
        <div className="text-center mt-16 space-y-6">
          <div className="space-y-4">
            <h3 className="text-2xl font-orbitron font-bold text-foreground">
              –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç?
            </h3>
            <p className="text-foreground/70 font-rajdhani max-w-2xl mx-auto">
              –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –û—Ç–≤–µ—á—É –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç!
            </p>
          </div>
          
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Button 
              onClick={() => document.getElementById('contact')?.scrollIntoView({ behavior: 'smooth' })}
              variant="terminal" 
              size="lg"
              className="group"
            >
              <MessageCircle className="mr-2 h-5 w-5" />
              –°–í–Ø–ó–ê–¢–¨–°–Ø
            </Button>
            <Button 
              onClick={openTelegramDirect}
              variant="outline" 
              size="lg" 
              className="border-primary/50 text-primary hover:bg-primary/10"
            >
              <Terminal className="mr-2 h-5 w-5" />
              TELEGRAM
            </Button>
          </div>
        </div>

      </div>
    </section>
  );
};

export default Services;